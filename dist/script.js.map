{"version":3,"sources":["script.js"],"names":["updateCount","jQuery","count","$","length","html","checkItem","console","log","localStorage","getItem","on","e","stopPropagation","this","closest","fadeOut","remove","click","show","hide","keypress","which","newTaskHtml","val","append","toggleClass","darkButton","document","getElementById","lightButton","setDarkMode","querySelector","classList","setItem","setLightMode","colorModeFromLocalStorage","colorModeFromPreferences","window","matchMedia","matches","loadAndUpdateColor","addEventListener","event"],"mappings":"AAAA,aAIA,SAASA,YAAYC,GACjB,IAAIC,EAAQC,EAAE,sBAAsBC,OACpCD,EAAE,gBAAgBE,KAAKH,EAAQ,eAsDnC,SAASI,aA5DTN,cACAO,QAAQC,IAAIC,aAAaC,QAAQ,cAUjCP,EAAE,cAAcQ,GAAG,QAAS,eAAe,SAAUC,GACjDA,EAAEC,kBACFV,EAAEW,MAAMC,QAAQ,SAASC,QAAQ,KAAK,WAClCb,EAAEW,MAAMG,SACRjB,oBAKRG,EAAE,cAAce,OAAM,WAClBX,QAAQC,IAAI,aACZL,EAAE,iBAAiBa,QAAQ,KAAK,WAC5Bb,EAAEW,MAAMG,eAKhBd,EAAE,YAAYe,OAAM,WAChBf,EAAE,SAASgB,UAGfhB,EAAE,eAAee,OAAM,WACnBf,EAAE,iBAAiBiB,OACnBjB,EAAE,gBAAgBgB,UAGtBhB,EAAE,kBAAkBe,OAAM,WACtBf,EAAE,gBAAgBiB,OAClBjB,EAAE,iBAAiBgB,UAIvBhB,EAAE,sBAAsBkB,UAAS,SAAUT,GACvC,GAAgB,KAAZA,EAAEU,MAAc,CAEhB,IAGMC,EAAc,oHAHLpB,EAAEW,MAAMU,MAG8H,qGAE/H,KAAlBrB,EAAEW,MAAMU,OACRrB,EAAE,cAAcsB,OAAOF,GAE3BvB,cAEAG,EAAEW,MAAMU,IAAI,QAQpBrB,EAAE,cAAcQ,GAAG,QAAS,SAAS,WACjCJ,QAAQC,IAAIL,EAAEW,OACdX,EAAEW,MAAMY,YAAY,kBAGpB1B,iBAKJ,IAAM2B,WAAaC,SAASC,eAAe,QACrCC,YAAcF,SAASC,eAAe,SAEtCE,YAAc,WAChBH,SAASI,cAAc,QAAQC,UAAY,OAC3CxB,aAAayB,QAAQ,YAAa,SAGhCC,aAAe,WACjBP,SAASI,cAAc,QAAQC,UAAY,QAC3CxB,aAAayB,QAAQ,YAAa,UAGhCE,0BAA4B,WAC9B,OAAO3B,aAAaC,QAAQ,cAG1B2B,yBAA2B,WAC7B,OAAOC,OAAOC,WAAW,gCAAgCC,QACnD,OACA,SAGJC,mBAAqB,WAKd,SAHKL,6BAA+BC,4BAG3BV,WAAWT,QAAUY,YAAYZ,SAKvDoB,OAAOC,WAAW,gCACbG,iBAAiB,UAAU,SAACC,GACzBA,EAAMH,QAAUb,WAAWT,QAAUY,YAAYZ,WAIzDuB","file":"script.js","sourcesContent":["updateCount();\r\nconsole.log(localStorage.getItem('colorMode'));\r\n\r\n// Function to count uncompleted items\r\nfunction updateCount(jQuery) {\r\n    let count = $(\".all_tasks .active\").length;\r\n    $(\".items_count\").html(count + \" items left\")\r\n}\r\n\r\n\r\n// Click on X to delete the task item\r\n$(\".all_tasks\").on('click', \".delete_btn\", function (e) {\r\n    e.stopPropagation();\r\n    $(this).closest(\".task\").fadeOut(400, function () {\r\n        $(this).remove();\r\n        updateCount();\r\n    });\r\n});\r\n\r\n// Click on clear completed button to Delete all completed tasks \r\n$(\".clear_btn\").click(function () {\r\n    console.log(\"clear btn\");\r\n    $(\".task.checked\").fadeOut(400, function () {\r\n        $(this).remove();\r\n    });\r\n});\r\n\r\n// click on the filter options to filter tasks by: all, active, completed\r\n$(\"#showAll\").click(function () {\r\n    $(\".task\").show();\r\n});\r\n\r\n$(\"#showActive\").click(function () {\r\n    $(\".task.checked\").hide();\r\n    $(\".task.active\").show();\r\n});\r\n\r\n$(\"#showCompleted\").click(function () {\r\n    $(\".task.active\").hide();\r\n    $(\".task.checked\").show();\r\n});\r\n\r\n//Add new todos\r\n$(\"input[type='text']\").keypress(function (e) {\r\n    if (e.which === 13) {\r\n        //grab text\r\n        var todoText = $(this).val();\r\n        //append todotext to ul\r\n\r\n        const newTaskHtml = '<div class=\"task item active\"><input class=\"checkbox\" type=\"checkbox\" maxlength=\"200\" onclick=\"checkItem()\" /><p>' + todoText + '</p><button class=\"delete_btn\"><img src=\"/images/icon-cross.svg\" alt=\"Delete task\"></button></div>';\r\n\r\n        if ($(this).val() !== \"\") {\r\n            $(\".all_tasks\").append(newTaskHtml);\r\n        }\r\n        updateCount();\r\n        //clear text\r\n        $(this).val(\"\");\r\n    }\r\n});\r\n\r\nfunction checkItem(){\r\n    \r\n}\r\n\r\n$(\".all_tasks\").on(\"click\", \".task\", function () {\r\n    console.log($(this));\r\n    $(this).toggleClass(\"active checked\");\r\n    // const input = this.children[0]\r\n    // input.checked = input.checked ? false : true;\r\n    updateCount();\r\n});\r\n\r\n\r\n// Dark ligth Toggle\r\nconst darkButton = document.getElementById('dark');\r\nconst lightButton = document.getElementById('light');\r\n\r\nconst setDarkMode = () => {\r\n    document.querySelector('body').classList = 'dark';\r\n    localStorage.setItem('colorMode', 'dark');\r\n};\r\n\r\nconst setLightMode = () => {\r\n    document.querySelector('body').classList = 'light';\r\n    localStorage.setItem('colorMode', 'light');\r\n};\r\n\r\nconst colorModeFromLocalStorage = () => {\r\n    return localStorage.getItem('colorMode');\r\n};\r\n\r\nconst colorModeFromPreferences = () => {\r\n    return window.matchMedia('(prefers-color-scheme: dark)').matches\r\n        ? 'dark'\r\n        : 'light' // If preference is set or does not match anything (light is default)\r\n};\r\n\r\nconst loadAndUpdateColor = () => {\r\n    // local storage has precendence over the prefers-color-scheme\r\n    const color = colorModeFromLocalStorage() || colorModeFromPreferences();\r\n\r\n\r\n    color == 'dark' ? darkButton.click() : lightButton.click();\r\n};\r\n\r\n// when the prefers-color-scheme changes, this event will be emitted\r\n// event reflects the media query, if it matches, the new color is dark, else it is light\r\nwindow.matchMedia('(prefers-color-scheme: dark)')\r\n    .addEventListener('change', (event) => {\r\n        event.matches ? darkButton.click() : lightButton.click();\r\n    });\r\n\r\n// Load the right color on startup - localStorage has precedence\r\nloadAndUpdateColor();"]}